Install:
  go get -u github.com/vexilology/shorteningo

Support:
  [!] Cutt.ly
  [!] Tinyurl.com

== Available with TinyUrl.com
  [!] - Create
  [!] - Update alias
  [x] - Update domain not working(subscribe mode only)
  [!] - Change url
  [!] - Information
  [x] - Delete not working(subscribe mode only)
  [x] - Archive not working(subscribe mode only)
  [x] - Analytics/.../ not working(subscribe mode only)

== Available with Cutt.ly
  [!] - Create
  [!] - Analytic
  [x] - Change name(subscribe mode only)
  [x] - Delete link(subscribe mode only)
  [x] - Edit link/title/name(subscribe mode only)

== Examples Cutt.ly
package main

import (
  "fmt"
  sh "github.com/vexilology/shorteningo"
)

func conf() *sh.Configuration { return sh.Add("PRIVATE_KEY") }

func main() {
  c := conf()

  // Example 1 - Create
  cn, err := c.CuttlyNew("YOUR_URL")
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(
    cn.Url.Status, cn.Url.ShortLink, cn.Url.Title,
    cn.Url.FullLink, cn.Url.Date,
  )

  // Example 2 - Analytics
  ca, err := c.CuttlyAnalytics("YOUR_SHORT")
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(
    ca.Stats.Date, ca.Stats.Clicks, ca.Stats.Title,
    ca.Stats.Status, ca.Stats.FullLink, ca.Stats.ShortLink,
    ca.Stats.Facebook, ca.Stats.Twitter, ca.Stats.Pinterest,
    ca.Stats.Instagram, ca.Stats.GooglePlus, ca.Stats.Linkedin,
    ca.Stats.Rest, ca.Stats.Bots,
  )
}

== Examples TinyUrl.com
package main

import (
  "fmt"
  sh "github.com/vexilology/shorteningo"
)

func conf() *sh.Configuration { return sh.Add("PRIVATE_KEY") }

func main() {
  c := conf()

  // Example 1 - Create
  // empty Domain: tiny.one
  // empty Alias:  generate random string
  e := &sh.Options{Domain: "", Alias: ""}
  tn, status_code, err := c.TinyNew("YOUR_URL", e)
  if err != nil {
    fmt.Println(status_code, err)
    return
  }
  fmt.Println(
    tn.Data.Domain, tn.Data.Alias, tn.Data.Tiny_url,
    tn.Data.Deleted, tn.Data.Archived,
    tn.Data.Analytics.Enable, tn.Data.Analytics.Public,
    tn.Data.Tags, tn.Data.Created_at,
    tn.Data.Url, tn.Code, tn.Errors,
  )

  // Example 2 - Update
  tu, status_code, err := c.TinyUpdate("YOUR_DOMAIN", "YOUR_ALIAS", "NEW_ALIAS")
  if err != nil {
    fmt.Println(status_code, err)
    return
  }
  fmt.Println(
    tu.Data.Domain, tu.Data.Alias, tu.Data.Tiny_url,
    tu.Data.Deleted, tu.Data.Archived, tu.Data.Tags,
    tu.Data.Analytics.Enable, tu.Data.Analytics.Public,
    tu.code, tu.Errors,
  )

  // Example 3 - Change
  tc, status_code, err := c.TinyChange("NEW_URL", "YOUR_DOMAIN", "YOUR_ALIAS")
  if err != nil {
    fmt.Println(status_code, err)
    return
  }
  fmt.Println(tc.Data.Url, tc.Code, tc.Errors)

  // Example 4 - Information
  tri, status_code, err := c.TinyInformation("YOUR_DOMAIN", "YOUR_ALIAS")
  if err != nil {
    fmt.Println(status_code, err)
    return
  }
  fmt.Println(
    tri.Code, tri.Errors,
    tri.Data.Domain, tri.Data.Alias, tri.Data.Deleted,
    tri.Data.Archived, tri.Data.Tags,
    tri.Data.Analytics.Enable, tri.Data.Analytics.Public,
    tri.Data.Tiny_url, tri.Data.User.Name,
    tri.Data.User.Email, tri.Data.Team.Name,
    tri.Data.Team.Slug, tri.Data.Hits, tri.Data.Url,
  )
}